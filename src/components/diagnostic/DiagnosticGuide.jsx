"use client"

import { useState, useEffect } from "react"

const DiagnosticGuide = ({ systemType, onBack, onReset }) => {
  const [currentQuestion, setCurrentQuestion] = useState(null)
  const [questionHistory, setQuestionHistory] = useState([])
  const [diagnosticTree, setDiagnosticTree] = useState(null)
  const [finalDiagnosis, setFinalDiagnosis] = useState(null)
  const [isLoading, setIsLoading] = useState(true)

  // Charger l'arbre de d√©cision pour le type de syst√®me
  useEffect(() => {
    const loadDiagnosticTree = async () => {
      setIsLoading(true)
      try {
        let data
        console.log("Chargement de l'arbre pour le syst√®me:", systemType)

        // Essayer de charger le fichier sp√©cifique au type de syst√®me
        try {
          data = await import(`../../data/diagnostic-trees${systemType}.json`)
          console.log("Arbre charg√© avec succ√®s:", data.default)
        } catch (error) {
          console.warn(`Impossible de charger l'arbre pour ${systemType}, utilisation du g√©n√©rique:`, error)
          // Fallback vers un arbre g√©n√©rique
          data = await import("../../data/diagnostic-trees/generic.json")
        }

        if (data && data.default) {
          setDiagnosticTree(data.default)
          // V√©rifier que la question de d√©part existe
          if (data.default.start) {
            setCurrentQuestion(data.default.start)
            console.log("Question de d√©part d√©finie:", data.default.start)
          } else {
            console.error("Pas de question de d√©part dans l'arbre")
          }
        } else {
          console.error("Donn√©es d'arbre invalides")
        }
      } catch (error) {
        console.error("Erreur lors du chargement de l'arbre de diagnostic:", error)
        // En cas d'erreur totale, cr√©er un arbre minimal
        const fallbackTree = {
          systemType: systemType,
          start: {
            id: "question_fallback",
            text: "Quel est le probl√®me principal que vous rencontrez ?",
            help: "D√©crivez le sympt√¥me le plus √©vident",
            answers: [
              {
                text: "Syst√®me ne fonctionne pas",
                description: "Aucune production",
                icon: "‚ùå",
                next: "diagnosis_system_failure",
              },
              {
                text: "Performance r√©duite",
                description: "Fonctionne mais mal",
                icon: "üìâ",
                next: "diagnosis_performance_issue",
              },
            ],
          },
          questions: {},
          diagnoses: {
            diagnosis_system_failure: {
              title: "Syst√®me en panne",
              description: "Votre syst√®me n√©cessite une intervention technique.",
              severity: "critical",
              causes: ["D√©faillance technique", "Probl√®me de configuration"],
              solutions: [
                {
                  action: "Contacter un technicien",
                  details: "Faire appel √† un professionnel qualifi√©",
                },
              ],
              prevention: "Effectuez une maintenance r√©guli√®re.",
            },
            diagnosis_performance_issue: {
              title: "Probl√®me de performance",
              description: "Le syst√®me fonctionne mais pas de mani√®re optimale.",
              severity: "medium",
              causes: ["Maintenance n√©cessaire", "Conditions d√©favorables"],
              solutions: [
                {
                  action: "V√©rifier les conditions",
                  details: "Contr√¥ler l'ensoleillement et la propret√©",
                },
              ],
              prevention: "Surveillez r√©guli√®rement les performances.",
            },
          },
        }
        setDiagnosticTree(fallbackTree)
        setCurrentQuestion(fallbackTree.start)
      }
      setIsLoading(false)
    }

    if (systemType) {
      loadDiagnosticTree()
    }
  }, [systemType])

  const handleAnswerSelect = (answer) => {
    if (!currentQuestion || !diagnosticTree) {
      console.error("Question ou arbre manquant")
      return
    }

    console.log("R√©ponse s√©lectionn√©e:", answer)
    console.log("Prochaine √©tape:", answer.next)

    // Ajouter √† l'historique
    setQuestionHistory((prev) => [
      ...prev,
      {
        question: currentQuestion,
        answer: answer,
      },
    ])

    // Trouver la prochaine question ou le diagnostic final
    const nextStep = answer.next

    if (nextStep.startsWith("question_")) {
      // Prochaine question
      const nextQuestion = diagnosticTree.questions[nextStep]
      if (nextQuestion) {
        console.log("Prochaine question trouv√©e:", nextQuestion)
        setCurrentQuestion(nextQuestion)
      } else {
        console.error("Question non trouv√©e:", nextStep)
        console.log("Questions disponibles:", Object.keys(diagnosticTree.questions || {}))
        // Cr√©er une question d'erreur
        setCurrentQuestion({
          id: "error_question",
          text: "Une erreur s'est produite dans le diagnostic. Voulez-vous recommencer ?",
          help: "Il semble qu'il y ait un probl√®me avec l'arbre de d√©cision",
          answers: [
            {
              text: "Recommencer",
              description: "Retour au d√©but",
              icon: "üîÑ",
              next: "diagnosis_restart_needed",
            },
          ],
        })
      }
    } else if (nextStep.startsWith("diagnosis_")) {
      // Diagnostic final
      const diagnosis = diagnosticTree.diagnoses[nextStep]
      if (diagnosis) {
        console.log("Diagnostic trouv√©:", diagnosis)
        setFinalDiagnosis(diagnosis)
        setCurrentQuestion(null)
      } else {
        console.error("Diagnostic non trouv√©:", nextStep)
        console.log("Diagnostics disponibles:", Object.keys(diagnosticTree.diagnoses || {}))
        // Cr√©er un diagnostic d'erreur
        setFinalDiagnosis({
          title: "Diagnostic non disponible",
          description: "Le diagnostic sp√©cifique n'a pas pu √™tre trouv√©.",
          severity: "medium",
          causes: ["Erreur dans l'arbre de d√©cision"],
          solutions: [
            {
              action: "Recommencer le diagnostic",
              details: "Relancer le processus de diagnostic guid√©",
            },
            {
              action: "Utiliser le diagnostic par sch√©ma",
              details: "Essayer l'autre mode de diagnostic disponible",
            },
          ],
          prevention: "Signaler ce probl√®me pour am√©liorer le syst√®me.",
        })
      }
    } else {
      console.error("Type de prochaine √©tape non reconnu:", nextStep)
    }
  }

  const handleGoBack = () => {
    if (questionHistory.length === 0) {
      onBack()
      return
    }

    // Retourner √† la question pr√©c√©dente
    const newHistory = [...questionHistory]
    const previousStep = newHistory.pop()
    setQuestionHistory(newHistory)
    setCurrentQuestion(previousStep.question)
    setFinalDiagnosis(null)
  }

  const handleRestart = () => {
    setQuestionHistory([])
    setFinalDiagnosis(null)
    if (diagnosticTree && diagnosticTree.start) {
      setCurrentQuestion(diagnosticTree.start)
    }
  }

  const generateReport = () => {
    if (!finalDiagnosis) return

    const historyText = questionHistory
      .map((step, index) => `${index + 1}. ${step.question.text}\n   R√©ponse: ${step.answer.text}`)
      .join("\n")

    alert(
      `Rapport de diagnostic guid√© g√©n√©r√©!\n\nType de syst√®me: ${systemType}\n\nCheminement:\n${historyText}\n\nDiagnostic: ${finalDiagnosis.title}\n\nLe rapport PDF d√©taill√© a √©t√© t√©l√©charg√©.`,
    )
  }

  const getSeverityClass = (severity) => {
    switch (severity) {
      case "critical":
        return "severity-high"
      case "high":
        return "severity-high"
      case "medium":
        return "severity-medium"
      case "low":
        return "severity-low"
      default:
        return "severity-medium"
    }
  }

  if (isLoading) {
    return (
      <div className="diagnostic-guide loading">
        <div className="loading-spinner"></div>
        <p>Chargement du diagnostic guid√©...</p>
      </div>
    )
  }

  // Debug: afficher les informations de l'arbre charg√©
  if (diagnosticTree) {
    console.log("Arbre diagnostic actuel:", {
      systemType: diagnosticTree.systemType,
      questionsCount: Object.keys(diagnosticTree.questions || {}).length,
      diagnosesCount: Object.keys(diagnosticTree.diagnoses || {}).length,
      hasStart: !!diagnosticTree.start,
    })
  }

  return (
    <div className="diagnostic-guide">
      <div className="guide-header">
        <h4>üß≠ Diagnostic Guid√© - {systemType}</h4>
        <div className="progress-indicator">
          √âtape {questionHistory.length + 1} {finalDiagnosis && "- Diagnostic termin√©"}
        </div>
      </div>

      {/* Debug info - √† supprimer en production */}
      {process.env.NODE_ENV === "development" && diagnosticTree && (
        <div
          style={{
            background: "rgba(255,255,255,0.1)",
            padding: "1rem",
            margin: "1rem 0",
            borderRadius: "8px",
            fontSize: "0.8rem",
          }}
        >
          <strong>Debug Info:</strong>
          <br />
          Questions disponibles: {Object.keys(diagnosticTree.questions || {}).length}
          <br />
          Diagnostics disponibles: {Object.keys(diagnosticTree.diagnoses || {}).length}
          <br />
          Question actuelle: {currentQuestion?.id || "Aucune"}
        </div>
      )}

      {/* Question actuelle */}
      {currentQuestion && (
        <div className="current-question">
          <div className="question-card">
            <div className="question-icon">‚ùì</div>
            <h5>Bienvenu(e), je suis l'assistant PV DiaMapp22222222222222 :</h5>
            <p className="question-text">{currentQuestion.text}</p>

            {currentQuestion.help && (
              <div className="question-help">
                <span className="help-icon">üí°</span>
                <p>{currentQuestion.help}</p>
              </div>
            )}

            <div className="answers-grid">
              {currentQuestion.answers &&
                currentQuestion.answers.map((answer, index) => (
                  <button key={index} className="answer-button" onClick={() => handleAnswerSelect(answer)}>
                    <span className="answer-icon">{answer.icon || "üëâ"}</span>
                    <div>
                      <span className="answer-text">{answer.text}</span>
                      {answer.description && <span className="answer-description">{answer.description}</span>}
                    </div>
                  </button>
                ))}
            </div>
          </div>
        </div>
      )}

      {/* Diagnostic final */}
      {finalDiagnosis && (
        <div className="final-diagnosis">
          <div className={`diagnosis-card ${getSeverityClass(finalDiagnosis.severity)}`}>
            <div className="diagnosis-header">
              <h5>üéØ Diagnostic identifi√©</h5>
              <span className="severity-badge">
                {finalDiagnosis.severity === "critical"
                  ? "Critique"
                  : finalDiagnosis.severity === "high"
                    ? "√âlev√©e"
                    : finalDiagnosis.severity === "medium"
                      ? "Mod√©r√©e"
                      : "Faible"}
              </span>
            </div>

            <h6 className="diagnosis-title">{finalDiagnosis.title}</h6>
            <p className="diagnosis-description">{finalDiagnosis.description}</p>

            {finalDiagnosis.causes && (
              <div className="causes-section">
                <h6>üîç Causes probables :</h6>
                <ul>
                  {finalDiagnosis.causes.map((cause, index) => (
                    <li key={index}>{cause}</li>
                  ))}
                </ul>
              </div>
            )}

            <div className="solutions-section">
              <h6>üîß Solutions recommand√©es :</h6>
              <ol>
                {finalDiagnosis.solutions.map((solution, index) => (
                  <li key={index}>
                    <strong>{solution.action}</strong>
                    {solution.details && <p>{solution.details}</p>}
                    {solution.warning && <div className="solution-warning">‚ö†Ô∏è {solution.warning}</div>}
                  </li>
                ))}
              </ol>
            </div>

            {finalDiagnosis.prevention && (
              <div className="prevention-section">
                <h6>üõ°Ô∏è Pr√©vention :</h6>
                <p>{finalDiagnosis.prevention}</p>
              </div>
            )}

            <div className="diagnosis-actions">
              <button onClick={generateReport} className="btn-primary">
                üìÑ G√©n√©rer le rapport PDF
              </button>
              <button onClick={handleRestart} className="btn-secondary">
                üîÑ Nouveau diagnostic
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Historique des questions */}
      {questionHistory.length > 0 && (
        <div className="question-history">
          <h6>üìã Historique du diagnostic :</h6>
          <div className="history-list">
            {questionHistory.map((step, index) => (
              <div key={index} className="history-item">
                <span className="step-number">{index + 1}</span>
                <div className="step-content">
                  <p className="step-question">{step.question.text}</p>
                  <p className="step-answer">‚Üí {step.answer.text}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      <div className="guide-actions">
        <button onClick={handleGoBack} className="btn-secondary">
          ‚Üê {questionHistory.length === 0 ? "Retour au mode de diagnostic" : "Question pr√©c√©dente"}
        </button>
        <button onClick={onReset} className="btn-secondary">
          üè† Recommencer
        </button>
      </div>
    </div>
  )
}

export default DiagnosticGuide
